a) I became interested in research very slowly. See, I was never much interested in attending college. It seemed--at least the way my parents and high-school counselors presented it--an expectation or obligation, almost like a dentist appointment.  College was something I had to complete as a prerequisite for getting a good job. And then what?  To be completely honest I was afraid of future where I leveraged a tiny skillset and let other abilities decline.  Then I discovered the field of programming languages, where the nuances of communication, assurances of formal reasoning, and practicality of computational tools all combine.

Two years study only confirmed this initial excitement, and so last summer I asked Professor Ross Tate if I could work with him on a project. He agreed and started me on static analysis of existing open-source Java programs (more on that in a minute). The more I learned the more excited I was to learn and contribute more.

Before working this summer with Ross, I had only a faint, admittedly romanticized idea of what research was like. My initial goal with the project was just to try something different, while the opportunity was available, and get an industry job the following year. As it turned out, I enjoy the work.  I like the independent nature of research, and I value the collaborative demeanour of the computer science community. Furthermore I enjoy the diverse quality of research.  The mix between invention, experimentation, and presentation is energizing. Above all, I am helping find solutions to keep computer programming enjoyable and productive. Working with a computer should not feel like an occupation or chore. It should feel empowering, working with a tool that leverages your own intelligence and skills to their fullest. My goal as a researcher is to keep reminding others of this great potential.

b) A relevant project is the paper I worked on with Ross and his PhD student Fabian Muelboeck. Together, we wrote a paper `Getting F-Bounded Polymorphism back into Shape' and submitted it to PLDI '14. It is currently under review. 

My work on this paper began last summer with that aforementioned static analysis of Java programs. Ross, through his experience with industry language designers and intuitions after writing `Taming Wildcards in Java's Type System' (PLDI 2011) guessed that classes and interfaces used for recursive subtyping definitions and classes and interfaces used for type parameters and return types constituted two disjoint sets in industry code. If this was true, he further guessed that it would great enhancements to the type system, including decidable subtyping. And so I spent a lot of time Summer 2013 writing a tool to graph and analyze the inheritance hierarchy of a Java codebase, finding existing open-source Java projects online, getting the projects to compile locally, and writing a modified compiler which tracked the use cases we were concerned with.

This project went well, both so far as finding positive results and my contribution as a researcher, so we continued working together in the Fall. For the first two months, Fabian and I met regularly working out proofs for various language features. It was a difficult process, and oftentimes when we reported to Ross he would identify big flaws in our work, but overall it was enjoyable and I thank Ross for giving us the opportunity to try and fail in a safe environment. The latter part of the semester we spent writing the paper. While Fabian had taken the lead for the proofs, I played a much more active role in the writing, creating the first drafts of the paper and reviewing and editing sections many times over.

Finally, after nearly 6 months dedicated effort under Ross's expert and invaluable leadership, we proudly submitted to PLDI.  I'm honored to have had the opportunity to play such an instrumental role in the project and I hope the three of us can make progress on another paper this Spring. 

c) I have found that I do best in a high-energy environment where myriad skills and imagination come together, where new ideas are encouraged and learning is paramount. That is academia. The problems I have worked on and the problems my colleagues here are working on are exciting and motivating. It is inspiring and humbling to work on building correct and beautiful things, rather than the popular or profitable values that drive industry projects.

I want to continue in this line of work, to continue improving our interactions with computers through language-level solutions. Barriers like cryptic error messages, insufficient means of expression, and poor feedback mechanisms prevent users from accomplishing their goals in an enjoyable or timely manner. The machines we have at our disposal have incredible raw computing strength, but unless humans can interface with and direct this potential it will remain dormant. Looking forward from where I stand today, the ideal means by which I can help solve these problems is by working towards a PhD.

A strength of mine which is not really reflected in the application but worth mentioning is my ability to communicate with people of varying backgrounds. I am able to listen--really listen--to others and to make them feel welcome and comfortable.  For example, in working as a TA I have worked closely with many different students both of different backgrounds and different dispositions. I have congratulated successful students, calmed angry or depressed students, mediated conflicts between group members, and presented material in a way such that students who were struggling could grasp the key concepts and make progress. I enjoy talking to people and indeed considered this as a career option (in Industrial and Labor relations); at any rate, I feel my ability to interact positively with people of all different backgrounds this is a strength I can bring to UW.

Lastly, I want to talk about weaknesses in my transcript. First, grades for my first semester are low. This was a product of my lack of enthusiasm for both the ILR program and for college in general. My grades in later semesters demonstrate how my attitude changed and I spent more time engaged in coursework. The exception to this upward trend is a C- in Applicable Algebra (MATH 3360). This course was my first proof-based mathematics course.  I enjoyed it plenty--it opened my eyes to mathematics as more than rote computation and memorization--but was below-average on homework assignments and utterly failed at the second prelim due to personal issues. Yet this experience prepared me for Intro to Algorithms the following year.
